~nonTerminals
program compoundStmt stmtList stmt1 statement ioStmt assignmentStmt expression signAndNextExpr term sign declarationStmt condition relation forStmt forConditions
~terminals
; : + - * / = < <= > >= == != ( ) begin end int for write identifier integerConst
~startSymbol
program
~productions
program -> compoundStmt
compoundStmt -> begin stmtList end
stmtList -> statement ; stmt1
stmt1 -> stmtList
stmt1 -> epsilon
statement -> assignmentStmt
statement -> declarationStmt
statement -> ioStmt
statement -> forStmt
ioStmt -> write ( identifier )
assignmentStmt -> identifier = expression
expression -> term signAndNextExpr
signAndNextExpr -> sign expression
signAndNextExpr -> epsilon
term -> identifier
term -> integerConst
sign -> +
sign -> -
sign -> *
sign -> /
declarationStmt -> int : identifier
condition -> identifier relation integerConst
relation -> <
relation -> <=
relation -> ==
relation -> !=
relation -> >=
relation -> >
forStmt -> for forConditions compoundStmt
forConditions -> ( int assignmentStmt ; condition ; assignmentStmt )